# ============================================================
# Zelda: Shattered Realms â€” Makefile using libdragon n64.mk
# Explicit source list; guaranteed .z64 via libdragon build macro
# ============================================================

N64_INST ?= /opt/libdragon

# ---------- Project metadata ----------
TARGET          := shattered_realms
N64_ROM_TITLE   := Shattered Realms
N64_ROM_REGION  := E
N64_ROM_MEDIA   := N
N64_ROM_SIZE    := 2M

# ---------- Sources (explicit) ----------
SOURCES := \
  src/main.c \
  src/hud.c \
  src/dungeon.c \
  src/combat.c \
  src/audio.c

# ---------- Assets / ROMFS ----------
ROMFS_DIRS := assets/romfs

# --- Locate libdragon's n64.mk (try multiple common locations) ---
N64_MK := $(firstword \
  $(wildcard $(N64_INST)/n64.mk) \
  $(wildcard $(N64_INST)/libdragon/n64.mk) \
  $(wildcard $(N64_INST)/mips64-elf/libdragon/n64.mk) \
)
ifeq ($(strip $(N64_MK)),)
$(error Could not find libdragon n64.mk. Looked in: \
  $(N64_INST)/n64.mk, \
  $(N64_INST)/libdragon/n64.mk, \
  $(N64_INST)/mips64-elf/libdragon/n64.mk. \
  Ensure the workflow copies /tmp/libdragon/n64.mk to $(N64_INST)/n64.mk)
endif

include $(N64_MK)

# Build targets generated by libdragon:
#   build/$(TARGET).elf, build/$(TARGET).z64, build/$(TARGET).dfs (if ROMFS)
$(call N64_BUILD_ROM,$(TARGET))

# ---------- Default goal & aliases ----------
.PHONY: default all copyouts showpaths clean distclean checkmain
.DEFAULT_GOAL := default
all: default

# Optional alias if something requests the no-extension name
build/$(TARGET): build/$(TARGET).z64
	@true

# Verify the 'main' symbol exists in the linked objects (fails loudly if missing)
checkmain:
	@echo "[CHECK] Looking for main() symbol in objects..."
	@$(N64_CC) -v >/dev/null 2>&1 || true
	@set -e; \
	for o in build/*.o; do :; done 2>/dev/null || { echo "No objects built yet"; exit 1; }; \
	if ! $(N64_TOOLCHAIN_ROOT)/bin/$(N64_TRIPLET)-nm build/*.o | grep -q ' T main$$'; then \
	  echo "ERROR: No 'main' symbol found in any object. Did src/main.c compile?"; exit 1; \
	else echo "OK: main() symbol found."; fi

default: build/$(TARGET).z64 copyouts
	@echo "ROM header (first 16 bytes):"
	xxd -l 16 -g 1 $(TARGET).z64 || true
	@echo "ROM size (bytes):"
	@wc -c < $(TARGET).z64 || true

copyouts:
	cp -f build/$(TARGET).z64 $(TARGET).z64
	cp -f build/$(TARGET).elf $(TARGET).elf
	@if [ -f build/$(TARGET).dfs ]; then cp -f build/$(TARGET).dfs romfs.dfs; fi

showpaths:
	@echo "Using N64_INST     = $(N64_INST)"
	@echo "n64.mk             = $(N64_MK)"
	@echo "N64_TOOLCHAIN_ROOT = $(N64_TOOLCHAIN_ROOT)"
	@echo "N64_TRIPLET        = $(N64_TRIPLET)"
	@echo "N64_CC             = $(N64_CC)"
	@echo "N64_LD_SCRIPT      = $(N64_LD_SCRIPT)"

clean:
	@$(RM) -rf build

distclean: clean
	@$(RM) -f $(TARGET).z64 $(TARGET).elf romfs.dfs
