name: Build ZeldaSR ROM

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      N64_INST: /opt/libdragon
      PATH: /opt/libdragon/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git python3 pkg-config libpng-dev zlib1g-dev jq curl xxd

      - name: Install mips64-elf toolchain (arch-aware)
        run: |
          set -e
          ARCH=$(dpkg --print-architecture)   # amd64 on runners
          API="https://api.github.com/repos/DragonMinded/libdragon/releases/tags/toolchain-continuous-prerelease"
          ASSETS_JSON=$(curl -fsSL "$API")
          case "$ARCH" in
            amd64) PATTERN='(x86_64|amd64)\.deb$' ;;
            arm64) PATTERN='(aarch64|arm64)\.deb$' ;;
            *)     echo "Unsupported arch: $ARCH"; echo "$ASSETS_JSON" | jq -r '.assets[].name'; exit 1 ;;
          esac
          DEB_URL=$(echo "$ASSETS_JSON" | jq -r --arg re "$PATTERN" '.assets[] | select(.name | test($re)) | .browser_download_url' | head -n1)
          [ -n "$DEB_URL" ] || { echo "No toolchain .deb matched $PATTERN"; exit 1; }
          echo "Downloading toolchain: $DEB_URL"
          curl -fsSL "$DEB_URL" -o /tmp/n64-toolchain.deb
          sudo dpkg -i /tmp/n64-toolchain.deb || true

          # Locate toolbin
          sudo mkdir -p /opt/libdragon/bin
          TOOLBIN=$( (command -v mips64-elf-gcc || true) | xargs -r dirname )
          [ -n "$TOOLBIN" ] || TOOLBIN=$(find /opt /usr -maxdepth 4 -type f -name mips64-elf-gcc 2>/dev/null | head -n1 | xargs -r dirname || true)
          [ -n "$TOOLBIN" ] || { echo "mips64-elf-gcc not found after install"; exit 1; }
          echo "Toolchain bin at: $TOOLBIN"

          # Only symlink if toolbin differs from N64_INST/bin
          if [ "$TOOLBIN" != "/opt/libdragon/bin" ]; then
            for t in mips64-elf-gcc mips64-elf-g++ mips64-elf-ar mips64-elf-ld mips64-elf-objcopy mips64-elf-objdump mips64-elf-ranlib mips64-elf-strip; do
              if [ -x "$TOOLBIN/$t" ]; then
                sudo ln -sf "$TOOLBIN/$t" "/opt/libdragon/bin/$t"
              fi
            done
          fi

          echo "Final /opt/libdragon/bin:"
          ls -l /opt/libdragon/bin

      - name: Install libdragon SDK (headers, libs, tools)
        run: |
          set -e
          git clone --depth=1 https://github.com/DragonMinded/libdragon.git /tmp/libdragon
          pushd /tmp/libdragon
          ./build.sh
          popd
          echo "SDK lib contents:"; ls -l /opt/libdragon/lib || true
          echo "SDK bin contents:"; ls -l /opt/libdragon/bin || true
          test -f /opt/libdragon/lib/header || (echo "ERROR: /opt/libdragon/lib/header missing" && exit 1)

      - name: Diagnose toolchain + SDK
        run: |
          set -e
          command -v mips64-elf-gcc || (echo "mips64-elf-gcc missing"; exit 1)
          command -v n64tool        || (echo "n64tool missing"; exit 1)
          command -v mkdfs          || (echo "mkdfs missing"; exit 1)
          command -v chksum64       || echo "WARN: chksum64 not found (CRC skip)"
          ls -l /opt/libdragon/lib/header

      - name: Build ROM
        run: |
          set -e
          echo "--- Makefile paths ---"
          make showpaths
          echo "----------------------"
          make clean all 2>&1 | tee build.log
          echo "âœ… Build complete."
          ls -l shattered_realms.* romfs.dfs || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shattered_realms
          path: |
            shattered_realms.z64
            shattered_realms.elf
            romfs.dfs
            build.log
          if-no-files-found: error
