name: n64-build
on:
  push:
  pull_request:

permissions:
  contents: read
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # ensures git log -1 works

      - name: Parse revision tokens from commit message
        id: revs
        shell: bash
        run: |
          set -e
          COMMIT_MSG="$(git log -1 --pretty=%B | tr '\n' ' ')"
          MFREV=$(grep -oE 'MF[0-9]{3}' <<<"$COMMIT_MSG" | tail -n1 | sed 's/MF//') || true
          BLREV=$(grep -oE 'BL[0-9]{3}' <<<"$COMMIT_MSG" | tail -n1 | sed 's/BL//') || true
          MCREV=$(grep -oE 'MC[0-9]{3}' <<<"$COMMIT_MSG" | tail -n1 | sed 's/MC//') || true
          MFREV=${MFREV:-000}; BLREV=${BLREV:-000}; MCREV=${MCREV:-000}
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "Commit message: $COMMIT_MSG"
          echo "Revisions parsed: MF=$MFREV BL=$BLREV MC=$MCREV SHA=$SHORT_SHA"
          echo "MFREV=$MFREV" >> $GITHUB_OUTPUT
          echo "BLREV=$BLREV" >> $GITHUB_OUTPUT
          echo "MCREV=$MCREV" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Pull libdragon toolchain image
        run: docker pull ghcr.io/dragonminded/libdragon:latest

      - name: Build inside libdragon image (discover tools; stamp ROM title)
        shell: bash
        run: |
          set -e
          UIDGID="$(id -u):$(id -g)"
          docker run --rm \
            -u "$UIDGID" \
            -v "$PWD":/work -w /work \
            ghcr.io/dragonminded/libdragon:latest \
            bash -lc '
              set -e
              export N64_INST=/opt/libdragon
              export PATH="$N64_INST/bin:$PATH"

              # Discover tool paths from PATH (donâ€™t hard-code /opt paths)
              CC="$(command -v mips64-elf-gcc)"
              N64TOOL="$(command -v n64tool)"
              ELFCOMPRESS="$(command -v n64elfcompress)"
              echo "Detected tools:"; echo "  CC=$CC"; echo "  N64TOOL=$N64TOOL"; echo "  ELFCOMPRESS=$ELFCOMPRESS"

              # Short ROM title (<=20 chars). Example: "SR MF079 MC030"
              TITLE="SR MF'${{ steps.revs.outputs.MFREV }}' MC'${{ steps.revs.outputs.MCREV }}'"

              # Show paths from Makefile (optional)
              make -n showpaths >/dev/null 2>&1 || true

              # Build; always emit build.log even on failure
              ( make clean all CC="$CC" N64TOOL="$N64TOOL" ELFCOMPRESS="$ELFCOMPRESS" TITLE="$TITLE" ) 2>&1 | tee build.log || true

              echo "Built files (inside container):"
              ls -l shattered_realms.* romfs.dfs || true

              if [ -f shattered_realms.z64 ]; then
                echo "ROM header (16 bytes):"
                xxd -l 16 -g 1 shattered_realms.z64 || true
              fi
            '

      - name: Upload build artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: n64-build-output-MF${{ steps.revs.outputs.MFREV }}-BL${{ steps.revs.outputs.BLREV }}-MC${{ steps.revs.outputs.MCREV }}-${{ steps.revs.outputs.SHORT_SHA }}
          path: |
            build.log
            shattered_realms.z64
            shattered_realms.elf
            shattered_realms.bin
            romfs.dfs
          if-no-files-found: warn
