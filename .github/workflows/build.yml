name: Build ROM (explicit toolchain + fresh libdragon tools)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      N64_INST: /opt/libdragon
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build prerequisites
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y build-essential git curl xxd jq

      - name: Install MIPS64 toolchain (amd64 .deb) and expose binaries
        shell: bash
        run: |
          set -e
          API="https://api.github.com/repos/DragonMinded/libdragon/releases/tags/toolchain-continuous-prerelease"
          DEB_URL=$(curl -fsSL "$API" \
            | jq -r '.assets[] | select(.name | test("gcc-toolchain-mips64-.*amd64\\.deb$")) | .browser_download_url' \
            | head -n1)
          if [ -z "$DEB_URL" ]; then
            echo "ERROR: Could not find amd64 gcc-toolchain-mips64 .deb asset." >&2
            exit 1
          fi
          echo "Downloading toolchain: $DEB_URL"
          curl -fsSL "$DEB_URL" -o /tmp/n64-toolchain.deb
          sudo dpkg -i /tmp/n64-toolchain.deb

          # Ensure bin dir exists and add to PATH for *this* step and later steps
          sudo mkdir -p /opt/libdragon/bin
          export PATH="/opt/libdragon/bin:$PATH"
          echo "/opt/libdragon/bin" >> "$GITHUB_PATH"

          # Create standard symlinks if only versioned binaries exist
          fix_link () {
            local name="$1"
            local dest="/opt/libdragon/bin/$name"
            # If dest already executable, nothing to do
            if [ -x "$dest" ]; then
              echo "$name ok at $dest"
              return 0
            fi
            # If found on PATH elsewhere, link dest -> existing
            if command -v "$name" >/dev/null 2>&1; then
              local existing
              existing="$(command -v "$name")"
              if [ "$existing" = "$dest" ]; then
                echo "$name already at $dest"
                return 0
              fi
              echo "Linking $name -> $existing"
              sudo ln -sf "$existing" "$dest"
              return 0
            fi
            # Search for versioned or unversioned binaries in common dirs
            local found=""
            for d in /opt/libdragon/bin /n64_toolchain/bin /usr/local/bin /usr/bin; do
              if compgen -G "$d/${name}-*" > /dev/null; then
                found="$(ls -1 "$d/${name}-*" | head -n1)"
                break
              fi
              if [ -x "$d/$name" ]; then
                found="$d/$name"
                break
              fi
            done
            if [ -n "$found" ]; then
              # Avoid linking a file to itself
              if [ "$found" = "$dest" ]; then
                echo "$name already at $dest"
                return 0
              fi
              echo "Linking $name -> $found"
              sudo ln -sf "$found" "$dest"
            else
              echo "WARNING: Could not locate $name in expected dirs"
            fi
          }

          for t in mips64-elf-gcc mips64-elf-g++ mips64-elf-ar mips64-elf-ld mips64-elf-objcopy mips64-elf-objdump mips64-elf-ranlib mips64-elf-strip mips64-elf-nm; do
            fix_link "$t"
          done

          echo "Toolchain contents:"
          ls -l /opt/libdragon/bin || true

          echo "Verifying key tools are executable on PATH (this step):"
          command -v mips64-elf-gcc
          command -v mips64-elf-g++
          command -v mips64-elf-nm

      - name: Build libdragon snapshot (headers/libs) and install to /opt/libdragon
        shell: bash
        run: |
          set -e
          rm -rf /tmp/libdragon
          git clone --depth=1 https://github.com/DragonMinded/libdragon.git /tmp/libdragon
          make -C /tmp/libdragon -j"$(nproc)"

          # Install SDK bits to $N64_INST
          sudo mkdir -p "$N64_INST"
          sudo cp -a /tmp/libdragon/mips64-elf "$N64_INST"/

          # Also install top-level linker scripts if present
          if [ -f /tmp/libdragon/n64.ld ]; then
            sudo install -m 0644 /tmp/libdragon/n64.ld "$N64_INST"/mips64-elf/lib/n64.ld
          fi
          if [ -f /tmp/libdragon/rsp.ld ]; then
            sudo install -m 0644 /tmp/libdragon/rsp.ld "$N64_INST"/mips64-elf/lib/rsp.ld
          fi

          # Sanity check
          test -f "$N64_INST/mips64-elf/lib/n64.ld"
          test -f "$N64_INST/mips64-elf/include/libdragon.h"

      - name: Build & install libdragon tools (n64elfcompress, n64tool)
        shell: bash
        run: |
          set -e
          # PATH from prior step is persisted via $GITHUB_PATH; export for safety
          export PATH="/opt/libdragon/bin:$PATH"
          make -C /tmp/libdragon/tools/n64elfcompress clean all
          make -C /tmp/libdragon/tools/n64tool        clean all
          sudo install -m 0755 /tmp/libdragon/tools/n64elfcompress/n64elfcompress "$N64_INST/bin/n64elfcompress"
          sudo install -m 0755 /tmp/libdragon/tools/n64tool/n64tool                 "$N64_INST/bin/n64tool"

          echo "Probing freshly built tools:"
          command -v n64elfcompress && n64elfcompress --help | head -5 || true
          command -v n64tool        && n64tool --help        | head -10 || true

      - name: Build ROM
        shell: bash
        run: |
          set -e
          export PATH="/opt/libdragon/bin:$PATH"
          make distclean || true

          # Optional diagnostics if your Makefile has 'showpaths'
          if make -n showpaths >/dev/null 2>&1; then
            echo "--- Makefile paths ---"
            make showpaths
            echo "----------------------"
          fi

          make all 2>&1 | tee build.log

          echo "Built files (if any):"
          ls -l shattered_realms.* romfs.dfs || true

          if [ -f shattered_realms.z64 ]; then
            echo "ROM header (first 16 bytes):"
            xxd -l 16 -g 1 shattered_realms.z64
            echo "ROM size (bytes):"
            wc -c < shattered_realms.z64
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shattered_realms
          path: |
            shattered_realms.z64
            shattered_realms.elf
            romfs.dfs
            build.log
          if-no-files-found: error
